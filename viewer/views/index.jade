extends layout

block scripts
  script(src='jquery-jvectormap-1.2.2.min.js')
  script(src='jquery-jvectormap-world-en.js')
  script(src='jquery.autocomplete.js')
  script(src='jQuery-contextMenu/src/jquery.ui.position.js')
  script(src='jQuery-contextMenu/src/jquery.contextMenu.js')
  link(rel='stylesheet', type='text/css', href='jQuery-contextMenu/src/jquery.contextMenu.css')

block content
  div(style="margin-bottom: 12px")
  div#bsqErr
  div#sessionsInfo.sessionsInfo
    div#world-map-wrapper.world-map-wrapper
      div#world-map.world-map
    div#sessionGraph.sessionGraph
    select#sessionGraphSelect
      option(value="lpHisto") sessions
      option(value="paHisto") packets
      option(value="dbHisto") databytes
  table#sessions(cellpadding="0",cellspacing="0",border="0",class="display",style="table { clear: both }")
    thead
      tr
        th
        th Id
        th Start
        th Stop
        th#a1.context-menu-one Src IP
        th Src Port
        th#a2.context-menu-one Dst IP
        th Dst Port
        th Packets
        th Src Packets
        th Dst Packets
        th Src / Dst Packets
        th(title="Databytes / Bytes") Bytes
        th Src Bytes
        th Dst Bytes
        th Src / Dst Bytes
        th Src Databytes
        th Dst Databytes
        th Src / Dst Databytes
        th Node
        th#info.context-menu-one
          div.infoColumn Info
    tbody
  br
  -if (!decodeItems) decodeItems = '{empty:{name:"None defined", disabled: true}}'
  script(type='text/javascript').
    var sessionsTable = null;
    var initialDisplayLength;
    var doPushState = 1;

    $(window).bind('popstate', function(e) {
      if (window.history.ready) {
        doPushState = 0;
        handleUrlParams();

        sessionsTable.page.len(initialDisplayLength);
        sessionsTable.draw();
      }
    });

    $(document).ready(function() {
      var initialParams = handleUrlParams();

      $(document).on('click', '#sessions tbody td.infoColumn img', function () {
        var nTr = $(this).closest("tr")[0];
        var rowData = sessionsTable.row(nTr).data();
        if ( this.src.match('up-arrow') ) {
          rowData.infoAll = 0;
        } else {
          rowData.infoAll = 1;
        }
        sessionsTable.row(nTr).data(rowData);
      });

      function openRow(nTr) {
        $(nTr).addClass('opened');
        var row = sessionsTable.row(nTr);
        var aData = row.data();
        $(nTr).find("td.sessionDetails img").attr("src", "images/details_close.png");
        var data = [];

        var base = molochSettings.detailFormat;
        var ts = molochSettings.showTimestamps;

        if (localStorage) {
          ["line", "image", "gzip"].forEach(function(key) {
            if (localStorage['moloch-' + key] !== undefined) {
              data.push({name: key, value: localStorage['moloch-' + key]});
            }
          });

          if (!base || base === "last") {
            base = localStorage['moloch-base'];
          }

          if (!ts || ts === "last") {
            ts = localStorage['moloch-ts'];
          }

          if (localStorage['moloch-decode']) {
            data.push({name: "decode", value: decodeParam(localStorage['moloch-decode'])});
          }
        }

        if (ts !== undefined) {
          data.push({name: "ts", value: ts});
        }

        if (base !== undefined) {
          data.push({name: "base", value: base});
        }

        $.ajax( {
            "dataType": 'html',
            "type": "GET",
            "url": '#{basePath}' + aData.no + '/' + aData.id + '/sessionDetail',
            "data": data,
            "success": function(data) {
              row.child(data, 'details').show();
            }
        } );
      }

      $(document).on('click', '#sessions tbody td.sessionDetails img', function () {
        var nTr = $(this).closest("tr")[0];
        var row = sessionsTable.row(nTr);
        if (row.child.isShown()) {
          this.src = "images/details_open.png";
          $(nTr).removeClass('opened');
          unPinRow(nTr, true);
          row.child.hide();
        } else {
          openRow(nTr);
        }
      } );

      $('#searchForm').submit(function() {
        sessionsTable.draw();
        return false;
      });

      var sortName2Col = {
        start: 2,
        stop: 3,
        srcip: 4,
        srcport: 5,
        dstip: 6,
        dstport: 7,
        packets: 8,
        srcpackets: 9,
        dstpackets: 10,
        srcdstpackets: 11,
        bytes: 12,
        srcbytes: 13,
        dstbytes: 14,
        srcdstbytes: 15,
        srcdatabytes: 16,
        dstdatabytes: 17,
        srcdstdatabytes: 18,
        node: 19
      };

      var pinnedColWidths = {
        "plusminus":30,
        "fp":105,
        "lp":105,
        "a1":160,
        "p1":40,
        "a2":160,
        "p2":40,
        "pa":80,
        "pa1":80,
        "pa2":80,
        "pa1pa2":150,
        "bytes":150,
        "by1":80,
        "by2":80,
        "by1by2":150,
        "db1":80,
        "db2":80,
        "db1db2":150,
        "no":150
      };

      var visibleColumns = ["plusminus", "fp", "lp", "a1", "p1", "a2", "p2", "pa", "bytes", "no", "info"];
      if(molochSettings.visibleColumns){
        visibleColumns = ["plusminus", "fp", "lp"].concat(molochSettings.visibleColumns);
      }

      function visibleColumn(name) {
        return visibleColumns.indexOf(name)>=0;
      }

      sessionsTable = $('#sessions').DataTable( {
        language: {
          processing: "<img src=\"watching.gif\"><div class='blink'>I'm Hootin' :D</div>",
          lengthMenu: "_MENU_"
        },
        dom: '<"fg-toolbar ui-widget-header ui-helper-clearfix"lipr>t',
        pageLength: initialDisplayLength,
        lengthMenu: [100, 500, 1000, 5000],
        processing: true,
        serverSide: true,
        retrieve: true,
        filter: false,
        scrollCollapse: true,
        autoWidth: false,
        paginationType: "full_numbers",
        columns: [
          {
            data: null,
            width: "10px",
            sortable: false,
            className: "sessionDetails",
            defaultContent: "",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              var pr;
              switch (rowData.pr) {
              case 1:
                pr = "icmp";
                break;
              case 6:
                pr = "tcp";
                break;
              case 17:
                pr =  "udp";
                break;
              }
              if (rowData.isOpen) {
                $(cell).html('<img src="images/details_close.png"><div class="protocolText">' + pr + '</div>');
              } else {
                $(cell).html('<img src="images/details_open.png"><div class="protocolText">' + pr + '</div>');
              }
            },
          },
          {
            data: "id",
            visible: false
          },
          {
            data: "fp",
            className: "dateColumn",
            width: "50",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html(dateString(rowData.fp, "<br>"));
            }
          },
          {
            data: "lp",
            className: "dateColumn",
            width: "50",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html(dateString(rowData.lp, "<br>"));
            }
          },
          {
            data: "a1",
            visible: visibleColumn("a1"),
            width: "100",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              var result = "<span molochexpr='ip.src' class='moloch-right-click'> " + ipString(rowData.a1) + "</span>";
              if (rowData.g1) {
                result += "<br><span molochexpr='country.src' class='moloch-right-click'>" + rowData.g1 + "</span>";
              }
              $(cell).html(result);
            }
          },
          {
            data: "p1",
            visible: visibleColumn("p1"),
            className: "context-menu-one",
            width: "55px"
          },
          {
            data: "a2",
            visible: visibleColumn("a2"),
            width: "100",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              var result = "<span molochexpr='ip.dst' class='moloch-right-click'> " + ipString(rowData.a2) + "</span>";
              if (rowData.g2) {
                result += "<br><span molochexpr='country.dst' class='moloch-right-click'>" + rowData.g2 + "</span>";
              }
              $(cell).html(result);
            }
          },
          {
            data: "p2",
            visible: visibleColumn("p2"),
            className: "context-menu-one",
            width: "55px"
          },
          {
            data: "pa",
            visible: visibleColumn("pa"),
            width: "55px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='packets' class='moloch-right-click'> " + rowData.pa + "</span>");
            }
          },
          {
            data: "pa1",
            visible: visibleColumn("pa1"),
            width: "55px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='packets.src' class='moloch-right-click'> " + rowData.pa1 + "</span>");
            }
          },
          {
            data: "pa2",
            visible: visibleColumn("pa2"),
            width: "55px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='packets.dst' class='moloch-right-click'> " + rowData.pa2 + "</span>");
            }
          },
          {
            data: "pa1",
            visible: visibleColumn("pa1pa2"),
            width: "55px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='packets.src' class='moloch-right-click'> " + numberWithCommas(rowData.pa1) + "</span> /<br>" +
                           "<span molochexpr='packets.dst' class='moloch-right-click'> " + numberWithCommas(rowData.pa2) + "</span>");
            }
          },
          {
            data: "by",
            visible: visibleColumn("bytes"),
            width: "80px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='databytes' class='moloch-right-click'> " + numberWithCommas(rowData.db) + "</span> /<br>" +
                           "<span molochexpr='bytes' class='moloch-right-click'> " + numberWithCommas(rowData.by) + "</span>");
            }
          },
          {
            data: "by1",
            visible: visibleColumn("by1"),
            width: "80px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='bytes.src' class='moloch-right-click'> " + rowData.by1 + "</span>");
            }
          },
          {
            data: "by2",
            visible: visibleColumn("by2"),
            width: "80px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='bytes.dst' class='moloch-right-click'> " + rowData.by2 + "</span>");
            }
          },
          {
            data: "by1",
            visible: visibleColumn("by1by2"),
            width: "80px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='bytes.src' class='moloch-right-click'> " + numberWithCommas(rowData.by1) + "</span> /<br>" +
                           "<span molochexpr='bytes.dst' class='moloch-right-click'> " + numberWithCommas(rowData.by2) + "</span>");
            }
          },
          {
            data: "db1",
            visible: visibleColumn("db1"),
            width: "80px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='databytes.src' class='moloch-right-click'> " + rowData.db1 + "</span>");
            }
          },
          {
            data: "db2",
            visible: visibleColumn("db2"),
            width: "80px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='databytes.dst' class='moloch-right-click'> " + rowData.db2 + "</span>");
            }
          },
          {
            data: "db1",
            visible: visibleColumn("db1db2"),
            width: "80px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='databytes.src' class='moloch-right-click'> " + numberWithCommas(rowData.db1) + "</span> /<br>" +
                           "<span molochexpr='databytes.dst' class='moloch-right-click'> " + numberWithCommas(rowData.db2) + "</span>");
            }
          },
          {
            data: "no",
            visible: visibleColumn("no"),
            width: "100px",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              $(cell).html("<span molochexpr='node' class='moloch-right-click'> " + rowData.no + "</span>");
            }
          },
          {
            sortable: false,
            data: null,
            visible: visibleColumn("info"),
            defaultContent: "",
            className: "infoColumn",
            createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
              var data = "<div class=infoColumn>";
              if (rowData.us) {
                if (rowData.infoAll) {
                  rowData.us.forEach(function(item) {
                    data += "<div molochexpr='http.uri' class=\"moloch-right-click\">" + safeStr(item) + "</div>";
                  });
                  data += '<img src="up-arrow.png">';
                } else {
                  rowData.us.slice(0,5).forEach(function(item) {
                    data += "<div molochexpr='http.uri' class=\"moloch-right-click\">" + safeStr(item) + "</div>";
                  });
                  if (rowData.us.length > 5) {
                    data += '<img src="down-arrow.png">';
                  }
                }
              } else if (rowData.esrc) {
                data += "<b>From:</b> ";
                data += rowData.esrc.join(", ");
                data += "<br>";
                if (rowData.edst) {
                  data += "<b>To:</b> ";
                  data += rowData.edst.join(", ");
                  data += "<br>";
                }
                if (rowData.esub) {
                  data += "<b>Subject:</b> ";
                  data += rowData.esub.join(", ");
                  data += "<br>";
                }
                if (rowData.efn) {
                  data += "<b>Files:</b> ";
                  data += rowData.efn.join(", ");
                  data += "<br>";
                }
              } else if (rowData.dnsho) {
                if (rowData.infoAll) {
                  rowData.dnsho.forEach(function(item) {
                    data += "<div molochexpr='host.dns' class=\"moloch-right-click\">" + safeStr(item) + "</div>";
                  });
                  data += '<br><img src="up-arrow.png">';
                } else {
                  rowData.dnsho.slice(0, 5).forEach(function(item) {
                    data += "<div molochexpr='host.dns' class=\"moloch-right-click\">" + safeStr(item) + "</div>";
                  });
                  if (rowData.dnsho.length > 5) {
                    data += '<br><img src="down-arrow.png">';
                  }
                }
              } else if (rowData.tls) {
                rowData.tls.forEach(function(tls) {
                  data += "<span molochexpr='cert.alt' class='moloch-right-click'>" + tls.sCn + "</span>";
                  if (tls.alt) {
                    data += " [";
                    for(var i = 0, ilen = tls.alt.length; i < ilen; i++) {
                      if (i > 0) {
                        data += ", ";
                      }
                      data += "<span molochexpr='cert.alt' class='moloch-right-click'>" + tls.alt[i] + "</span>";
                    }
                    data += "]";
                  }
                  data += "<br>";
                });
              } else if (rowData.ircch) {
                data += "<b>Channel:</b> ";
                data += rowData.ircch.join(", ");
                data += "<br>";
              }

              data += "</div>";

              $(cell).html(data);
            }
          }
        ],
        order: [[sortName2Col[molochSettings.sortColumn || "start"] || 2 , molochSettings.sortDirection || "asc"]],
        ajax: function(data, callback, settings) {
          neworder = [];
          for (var o in data.order) {
            neworder.push(data.columns[data.order[o].column].data + ":" + data.order[o].dir);
          }
          data.order = neworder.join(",");
          delete data.columns;
          delete data.search;

          var aoData = [];
          for (var key in data) {
            aoData.push({name: key, value: data[key]});
          }

          var params = buildParams();
          aoData = $.merge(aoData, params);
          aoData.push({name: "facets", value: "1"});

          var api = this.api();
          if (api.page.info().length !== 100) {
            params.push({name: "length", value: api.page.info().length});
          }

          var state = $.param(params);
          if (doPushState && state !== window.location.search.substring(1) && 'pushState' in history) {
            history.pushState({}, this.title || '', '?' + state);
          } else {
            doPushState = 1;
          }

          startBlink();
          $.ajax( {
             "dataType": 'json',
              "type": "GET",
              "url": "#{basePath}sessions.json",
              "data": aoData,
              "success": function (json) {
                updateHealth(json.health);

                if (json.lpHisto && json.lpHisto[0]) {
                  if ($("#startDate").val() === "") {
                    $("#startDate").val(dateString(json.lpHisto[0][0]/1000, ' '));
                  }
                  if ($("#stopDate").val() === "") {
                    $("#stopDate").val(dateString(json.lpHisto[json.lpHisto.length-1][0]/1000) + 59, ' ');
                  }
                }

                updateGraph(json.graph);
                updateMap(json.map);
                updateString("#bsqErr", json.bsqErr);

                callback(json);
                var info = sessionsTable.page.info();
                $("#actionsForm").data("moloch-visible", info.length)
                                 .data("moloch-all", info.recordsDisplay);
                if (initialParams.openAll) {
                  nNodes = sessionsTable.rows().nodes().flatten().toArray()
                  for (var i = 0, ilen = nNodes.length; i < ilen; i++) {
                    openRow(nNodes[i]);
                  }
                }
                initialParams.openAll = 0;
                stopBlink();
              },
              "error": function (jqXHR, textStatus, errorThrown) {
                if ($('#sessions').data('unloading') !== true) {
                  alert("Sessions: Error fetching session data, maybe network error or need to reload page?");
                }
              }
          } );
        }
      } );

      $('#sessions').unload(function() {
        $('#sessions').data('unloading', true);
      });

      setupGraph();
      expressionResize();

      setupMap();

      $.contextMenu({
          selector: '.context-menu-one',
          build: function($trigger, e) {
            var items = {};

            var id = $(e.target).closest(".context-menu-one").attr("id");
            if (id === "a1" || id === "a2" || id === 'info') {
              if (id === 'info') {
                items = {
                  usitems: {name: "Export Unique URLs", counts:0, field: 'rawus'},
                  usitemcounts: {name: "Export Unique URLs with Counts", counts:1, field: 'rawus'},
                  esubitems: {name: "Export Unique Email Subjects", counts:0, field: 'rawesub'},
                  esubitemcounts: {name: "Export Unique Email Subjects with Counts", counts:1, field: 'rawesub'},
                  esrcitems: {name: "Export Unique Email Source", counts:0, field: 'esrc'},
                  esrcitemcounts: {name: "Export Unique Email Source with Counts", counts:1, field: 'esrc'},
                  edstitems: {name: "Export Unique Email Destination", counts:0, field: 'edst'},
                  edstitemcounts: {name: "Export Unique Email Destination with Counts", counts:1, field: 'edst'},
                  efnitems: {name: "Export Unique Email Files", counts:0, field: 'efn'},
                  efnitemcounts: {name: "Export Unique Email Files with Counts", counts:1, field: 'efn'},
                  ircchitems: {name: "Export Unique IRC Channels", counts:0, field: 'ircch'},
                  ircchitemcounts: {name: "Export Unique IRC Channels with Counts", counts:1, field: 'ircch'}
                };
              } else {
                items = {
                  items: {name: "Export Unique IPs", counts:0, field: e.target.id},
                  itemcounts: {name: "Export Unique IPs with Counts", counts:1, field: e.target.id}
                };
              }
              return {
                callback: function(key, options) {
                  var data = sessionsTable.fnSettings().oApi._fnAjaxParameters(sessionsTable.fnSettings());
                  var params = buildParams();
                  params = $.merge(data, params);

                  params.push({name:'field', value:items[key].field});
                  params.push({name:'counts', value:items[key].counts});
                  var url = "unique.txt?" + $.param(params);

                  window.open(url);
                },
                items: items
              };
            }

            var rowData = sessionsTable.fnGetData($(e.target).closest("tr")[0]);
            if (rowData === null) {
              return false;
            }
            var sPos = sessionsTable.fnGetPosition( e.target );
            var ip, country, port, suffix;
            if (visibleColumns[sPos[1]] === "p1" || visibleColumns[sPos[1]] === "p2") {
              if (visibleColumns[sPos[1]] === "p1") {
                ip = ipString(rowData.a1);
                port = rowData.p1;
                suffix = ".src";
              } else {
                ip = ipString(rowData.a2);
                port = rowData.p2;
                suffix = ".dst";
              }
              items = {
                andport: {name: "<b>and</b> Port " + port, exp: "port" + suffix + "==" + port},
                andnotport: {name: "<b>and not</b> Port " + port, exp: "port" + suffix + "!=" + port},
                andipport: {name: "<b>and<b> " + ip + ":" + port, exp: "ip" + suffix + "==" + ip + ":" + port},
                andnotipport: {name: "<b>and not</b> " + ip + ":" + port, exp: "ip" + suffix + "!=" + ip + ":" + port}
              };
            } else {
              return false;
            }

            return {
              callback: function(key, options) {
                addExpression(items[key].exp);
              },
              items: items
            };
          }
      });

      var searchStuffOffset = $('#searchStuff').offset().top;
      var headerOffset = $('.ui-widget-header').offset().top - $('#searchStuff').height();

      $(window).scroll(function () {
        var scrollTop = $(window).scrollTop(); // check the visible top of the browser

        if (searchStuffOffset < scrollTop) {
          $('#searchStuff').addClass('fixedsearch');
          $('#logo').hide();
        } else {
          $('#searchStuff').removeClass('fixedsearch');
          $('#logo').show();
        }

        if (!$('.ui-widget-header').hasClass('fixedheader')) {
          if (headerOffset < scrollTop) {
            $('.ui-widget-header').css("top", $('#searchStuff').height()-1);
            $('.ui-widget-header').addClass('fixedheader');
            $(window).scrollTop(headerOffset - $('.ui-widget-header').height());
          }
        } else {
          if (headerOffset - $('.ui-widget-header').height() > scrollTop) {
            $('.ui-widget-header').removeClass('fixedheader');
            $(window).scrollTop(headerOffset);
          }
        }

        var height = $('#searchStuff').height() + $('.ui-widget-header').height();
        $(".opened").each(function(a1, nTr) {
          var hasClass = $(nTr).hasClass("fixedrow");

          if (!hasClass) {
            if ($(nTr).offset().top - height < scrollTop) {
              $(nTr).data('savedTopOffset', $(nTr).offset().top - height);

              $(nTr).css("top", height-1);
              $(nTr).addClass('fixedrow');
              var td = $(nTr).children("td");
              $(td).each(function(i, e) {
                $(e).html($(e).html().replace("<br>", "&nbsp;"));
                $(e).width(pinnedColWidths[visibleColumns[i]]);
              });
              $($(nTr).find(".infoColumn")).hide();
              $($(nTr).find(".protocolText")).hide();
            }
          } else {
            if ($(nTr).data('savedTopOffset') - $(nTr).height() > scrollTop) {
              unPinRow(nTr, false);
            }
          }
          height += $(nTr).height();
        });
      });

      $.contextMenu({
        selector: ".format-other",
        trigger: "hover",
        items: !{decodeItems},
        events: {
          show: function(opt) {
            var sessionDetail = this.closest(".sessionDetail");
            if (sessionDetail.parent().data("decodeOptions")) {
              $.contextMenu.setInputValues(opt, sessionDetail.parent().data("decodeOptions"));
            } else if (localStorage && localStorage['moloch-decode']) {
              $.contextMenu.setInputValues(opt, JSON.parse(localStorage['moloch-decode']));
            }
          },
          hide: function(opt) {
            var sessionDetail = this.closest(".sessionDetail");
            var decode = $.contextMenu.getInputValues(opt);
            sessionDetail.parent().data("decodeOptions", decode);
            if (localStorage) {
              localStorage['moloch-decode'] = JSON.stringify(decode);
            }
            this.change();
          }
        }
      });



      $(document).on('click', '[molochexpr]', addExpressionClick);
    }); // document ready

    function unPinRow(nTr, updateRows) {
      $($(nTr).find(".infoColumn")).show();
      $($(nTr).find(".protocolText")).show();
      $($(nTr).children("td")[10]).show();
      $(nTr).removeClass('fixedrow');
      $($(nTr).children("td")).each(function(i, e) {
        $(e).html($(e).html().replace("&nbsp;", "<br>"));
      });

      if (updateRows) {
        var height = $('#searchStuff').height() + $('.ui-widget-header').height();
        $(".opened.fixedrow").each(function(a1, a2) {
          $(a2).css("top", height-1);
          height += $(a2).height();
        });
      }
    }

    setTimeout(function () {window.history.ready = true;}, 500);

    $(window).resize(function(e) {
      if (e.target.id === "sessionGraph" || e.target.id === "world-map") {
        return;
      }
      expressionResize();
    });
