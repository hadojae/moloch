extends layout

block content
  //-
  mixin spi(name, field, expr, c)
    dt.context-menu-spi #{name}
      input(id="SPIck-#{field}", type="checkbox", class="#{c}-group")
    dd(id="SPIda-#{field}", molochexpr=expr)

  mixin title(name, c)
    h1.collapsible(id="spiview-#{name}") #{name}
      span.collapse-display
      span.info

  script(src='jquery-jvectormap-1.2.2.min.js')
  script(src='jquery-jvectormap-world-en.js')
  script(src='jquery.autocomplete.js')
  script(src='jquery.cookie.js')
  script(src='jquery.collapsible.js')
  script(src='jQuery-contextMenu/src/jquery.ui.position.js')
  script(src='jQuery-contextMenu/src/jquery.contextMenu.js')
  link(rel='stylesheet', type='text/css', href='jQuery-contextMenu/src/jquery.contextMenu.css')

  div(style="margin-bottom: 12px")
  div#bsqErr
  div#sessionsInfo.sessionsInfo
    div#world-map-wrapper.world-map-wrapper
      div#world-map.world-map
    div#sessionGraph.sessionGraph
    select#sessionGraphSelect
      option(value="lpHisto") sessions
      option(value="paHisto") packets
      option(value="dbHisto") databytes
  div#spiViewInfo
    span#recordsText
  div#spiview
    -var cats = Object.keys(categories).sort();
    -cats.splice(cats.indexOf("general"), 1);
    -cats.unshift("general");
    each ckey in cats
      -var cvalue = categories[ckey]
      +title(ckey, ckey)
      dl(style="display:none")
        -cvalueSorted = cvalue.sort(function(a,b) {return a.friendlyName.localeCompare(b.friendlyName);});
        each fvalue,fkey in cvalueSorted
          - if (fvalue.noFacet || fvalue.regex)
            - continue
          - else if (fvalue.dbField.match(/\.snow$/))
            +spi(fvalue.friendlyName, fvalue.dbField.replace(".snow", ".raw"), fvalue.exp, ckey)
            +spi(fvalue.friendlyName + " Tokens", fvalue.dbField, fvalue.exp, ckey)
          - else if (fvalue.rawField)
              +spi(fvalue.friendlyName, fvalue.rawField, fvalue.exp, ckey)
              +spi(fvalue.friendlyName + " Tokens", fvalue.dbField, fvalue.exp, ckey)
          - else
              +spi(fvalue.friendlyName, fvalue.dbField, fvalue.exp, ckey)

  script(type='text/javascript').
    var initialDisplayLength = 100;
    var doPushState = 1;
    var fetchSize = {};
    var spiTerms = {};

    $(".spion").prop("checked", "checked");

    $(window).bind('popstate', function(e) {
      if (window.history.ready) {
        doPushState = 0;
        handleUrlParams();
        loadData();
      }
    });

    function fetchData(theQueue, state) {
      var params = buildParams();
      state += "&" + $.param(params);
      var url = "spiview.json?" + state;
      if (doPushState && state !== window.location.search.substring(1) && 'pushState' in history) {
        var fullstate = "";
        $("[id^=SPIck]").each(function(index, item) {
          var field = item.id.substring(6);
          if (fetchSize[field]) {
            fullstate += "," + field + ":" + fetchSize[field];
          } else if ($(item).prop("checked")) {
            fullstate += "," + field + ":100";
          }
        });
        fullstate += "&" + $.param(params);
        history.pushState({}, this.title || '', "spiview?spi=" + fullstate.substring(1));
      } else {
        doPushState = 1;
      }

      $.ajaxQueue(theQueue, {
         "dataType": 'json',
          "type": "GET",
          "url": url,
          "success": function (json) {
            updateHealth(json.health);

            if (json.lpHisto && json.lpHisto[0]) {
              if ($("#startDate").val() === "") {
                $("#startDate").val(dateString(json.lpHisto[0][0]/1000, ' '));
              }
              if ($("#stopDate").val() === "") {
                $("#stopDate").val(dateString(json.lpHisto[json.lpHisto.length-1][0]/1000) + 59, ' ');
              }
            }

            if (json.protocols) {
              $(".info").text("");
              for (var key in json.protocols) {
                $("#spiview-" + key + " .info").each(function(i, o) {
                  $(o)
                    .append($('<span>').text(key).addClass("moloch-right-click").attr("molochexpr", "protocols"))
                    .append($('<span>').text("(" + json.protocols[key] + ")").addClass("spicount"))
                    ;
                });
              }

              // Should be in db
              var extras = {
                tcp: "general",
                udp: "general",
                icmp: "general",
                smtp: "email",
                lmtp: "email"
              };


              for (key in extras) {
                if (json.protocols[key]) {
                  $("#spiview-" + extras[key] + " .info")
                    .append($('<span>').text(key).addClass("moloch-right-click").attr("molochexpr", "protocols"))
                    .append($('<span>').text("(" + json.protocols[key] + ")").addClass("spicount"))
                    ;
                }
              }
            }

            updateGraph(json.graph);
            updateMap(json.map);
            updateString("#bsqErr", json.bsqErr);

            $("#actionsForm").data("moloch-visible", -1)
                             .data("moloch-all", json.recordsFiltered);
            $("#recordsText").text("Showing " + numberWithCommas(json.recordsFiltered) + " entries filtered from " + numberWithCommas(json.recordsTotal) + " total entries");

            $.each(json.spi, function(spii, spi) {
              var spida = $("[id='SPIda-" + spii + "']"); // not # because period in field name
              if (spi.buckets.length !== 0) {
                spida.text("");
              } else {
                spida.html("&nbsp;");
              }

              var spiterm = "";
              var finfo = db2Field(spii);

              if (spii.match(/^(a1|a2|xff|dnsip|eip|socksip)$/) !== null ||
                  (finfo && finfo.type === "ip")) {
                $.each(spi.buckets, function(i, term) {
                  if (i !== 0) {
                    spida.append(", ");
                    spiterm += ",";
                  }
                  spiterm += ipString(term.key);
                  spida.append($('<a></a>').attr("href","#")
                                           .text(ipString(term.key))
                                           .addClass("moloch-right-click")
                                           .click(addExpressionClick)
                                           );
                  spida.append("<span class=\"spicount\">(" + term.doc_count + ")</span>");
                });
              } else if (finfo && finfo.type === "seconds") {
                $.each(spi.buckets, function(i, term) {
                  if (i !== 0) {
                    spida.append(", ");
                    spiterm += ",";
                  }
                  spiterm += dateString(term.key, " ");
                  spida.append($('<a></a>').attr("href","#")
                                           .text(dateString(term.key, " "))
                                           .addClass("moloch-right-click")
                                           .click(addExpressionClick)
                                           );
                  spida.append("<span class=\"spicount\">(" + term.doc_count + ")</span>");
                });
              } else {
                $.each(spi.buckets, function(i, term) {
                  if (i !== 0) {
                    spida.append(", ");
                    spiterm += ",";
                  }
                  var quoted = term.key;
                  if (typeof quoted == "string" && quoted.match(/[^\w]/)) {
                    quoted = '"' + quoted + '"';
                  }
                  spiterm += quoted;
                  spida.append($('<a></a>').attr("href","#")
                                           .text(""+term.key)
                                           .addClass("moloch-right-click")
                                           .click(addExpressionClick)
                                           );
                  spida.append("<span class=\"spicount\">(" + term.doc_count + ")</span>");
                });
              }
              spiTerms[spii] = spiterm;

              if (spi.sum_other_doc_count > 0) {
                  spida.append(", <a href=\"#\" onclick='return moreSPI(\"" +
                               spii +
                               "\");'</a> &hellip;</a>");
                  spida.append("<span class=\"spicount\">(" + spi.sum_other_doc_count + ")</span>");
              }
            });
          }
      });
    }

    function fetchState(item, append) {
      var field = item.attr('id').substring(6);
      var state = "";

      var spida = $("[id='SPIda-" + field + "']"); // not # because period in field name
      if (item.prop("checked")) {
        if (!fetchSize[field]) {
          fetchSize[field] = 100;
        }
        state = field + ":" + fetchSize[field];
        if (append) {
          spida.append(" <img src=\"spinning.gif\">");
        } else {
          spida.html("<img src=\"spinning.gif\">");
        }
      } else {
        delete fetchSize[field];
        spida.html("&nbsp;");
      }
      return state;
    }
    var loadQueue = $({});
    var clickQueue = $({});

    function loadData() {
      loadQueue.clearQueue();
      clickQueue.clearQueue();

      var state = "facets=1&spi=";
      var num = 0;
      $("[id^=SPIck]").each(function(index, item) {
        var istate = fetchState($(item), false);

        if (istate !== "") {
          if (num !== 0) {
            state += ",";
          }
          num++;
          state += istate;
          if (num === 3) {
            fetchData(loadQueue, state);
            num = 0;
            state = "spi=";
          }
        }
      });

      if (num > 0) {
        fetchData(loadQueue, state);
      }
    }

    function moreSPI(spii) {
      var spick = $("[id='SPIck-" + spii + "']");
      if (fetchSize[spii]) {
        fetchSize[spii] += 100;
      }
      var state = fetchState(spick, true);
      fetchData(clickQueue, "spi=" + state);
      return false;
    } 
    $('#searchForm').submit(function() {
      loadData();
      return false;
    });

    $(window).resize(function(e) {
      expressionResize();
    });

    $(":checkbox").on('change', function(e) {
      var state = fetchState($(e.target), true);
      if (state !== "") {
        setTimeout(fetchData, 100, clickQueue, "spi=" + state);
      }
      return false;
    });

    $(document).ready(function() {

      $('.collapsible').collapsible({
        cookieName: 'spiview-collapsible'
      });

      if (!molochSettings.spiviewLoad) {
        molochSettings.spiviewLoad = ["a1", "a2", "prot-term"];
      }

      if (!molochSettings.spiviewHide) {
        molochSettings.spiviewHide = [];
      }

      var initialParams = handleUrlParams();
      if (initialParams.spi) {
        initialParams.spi.split(",").forEach(function (item) {
          var parts = item.split(":");
          fetchSize[parts[0]] = +parts[1];
          $("[id='SPIck-" + parts[0] + "']").prop("checked", "checked");
        });
      } else {
        molochSettings.spiviewLoad.forEach(function(key) {
          $("[id='SPIck-" + key + "']").prop("checked", "checked");
        });
      }

      molochSettings.spiviewHide.forEach(function(key) {
        var spida = $("[id='SPIda-" + key + "']"); // not # because period in field name
        spida.addClass("hidden").prev().addClass("hidden");
      });

      loadData();

      setupGraph();
      expressionResize();
      setupMap();

      $.contextMenu({
          selector: '.context-menu-spi',
          build: function($trigger, e) {
            var checkbox = $(e.target).find("input");
            var field = checkbox.attr("id").substring(6);
            items = {
              spigraph: {name: "Open SPI Graph " + $(e.target).text(), mtype:0, field: field},
              items: {name: "Export Unique " + $(e.target).text(), mtype:1, counts:0, field: field},
              itemcounts: {name: "Export Unique " + $(e.target).text() + " with Counts", mtype:1, counts:1, field: field},
              pivot: {name: "Pivot on " + $(e.target).text(), mtype:2, counts:0, field: field},
              sep1: "---------",
              display: {
                name: "Display",
                type: "select",
                options: {1: "Load by default", 2: "Load when selected", 3: "Hide from display"},
                selected: (molochSettings.spiviewLoad.indexOf(field) !== -1?1:(molochSettings.spiviewHide.indexOf(field) !== -1?3:2)),
                events: {
                  change: function(ec) {
                    var val = $(ec.target).val();
                    removeArray(molochSettings.spiviewLoad, field);
                    removeArray(molochSettings.spiviewHide, field);
                    if (val === "1") {
                      molochSettings.spiviewLoad.push(field);
                    } else if (val === "3") {
                      molochSettings.spiviewHide.push(field);
                    }

                    if (val === "3") {
                      $(e.target).addClass("hidden");
                      $(e.target).next().addClass("hidden");
                    } else {
                      $(e.target).removeClass("hidden");
                      $(e.target).next().removeClass("hidden");
                    }
                    molochSettings.token = "#{token}";
                    $.ajax( {
                      "dataType": 'json',
                      "type": "POST",
                      "url": "#{basePath}changeSettings",
                      "data": molochSettings,
                      "success": function(data) {
                        if (!data.success) {
                          alert(data.text);
                        }
                      }
                    });
                  }
                }
              }
            };
            return {
              callback: function(key, options) {
                var params = buildParams();
                var url;

                if (items[key].mtype === 2) {
                  var spida = $("[id='SPIda-" + items[key].field + "']"); // not # because period in field name
                  var str = spida.attr("molochexpr") + " == [" + spiTerms[items[key].field] + "]";

                  $("#expression").val(str);
                  return true;
                } else if (items[key].mtype === 0) {
                  params.push({name:'field', value:items[key].field});
                  url = "spigraph?" + $.param(params);
                } else {
                  params.push({name:'field', value:items[key].field});
                  params.push({name:'counts', value:items[key].counts});
                  url = "unique.txt?" + $.param(params);
                }

                window.open(url);
              },
              items: items
            };
          }
      });

      $.contextMenu({
          selector: '.collapsible',
          items: {
            "load": {name: "Load all items in section", callback: function(key, options) {
              var items = $(options.$trigger).next().find("input").filter(":not(:hidden)").prop("checked", "checked");
              items.each(function(index, element) {
                $(element).triggerHandler('change');
              });
            }},
            "unload": {name: "Unload all items in section", callback: function(key, options) {
              var items = $(options.$trigger).next().find("input").filter(":not(:hidden)").prop("checked", false);
              items.each(function(index, element) {
                $(element).triggerHandler('change');
              });
            }},
            "unhide": {name: "Show hidden items", callback: function(key, options) {
              $(options.$trigger).next().find(".hidden").addClass("hidden-show").removeClass("hidden");
            }},
            "hide": {name: "Hide hidden items", callback: function(key, options) {
              $(options.$trigger).next().find(".hidden-show").addClass("hidden").removeClass("hidden-show");
            }}
          }
      });

      var searchStuffOffset = $('#searchStuff').offset().top;
      $(window).scroll(function () {
        var scrollTop = $(window).scrollTop(); // check the visible top of the browser

        if (searchStuffOffset < scrollTop) {
          $('#searchStuff').addClass('fixedsearch');
          $('#logo').hide();
        } else {
          $('#searchStuff').removeClass('fixedsearch');
          $('#logo').show();
        }
      });
    });

